{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/odile/anime-manga-app/lib/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nexport const supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n  {\n    auth: {\n      persistSession: true,\n      autoRefreshToken: true,\n      detectSessionInUrl: true,\n    }\n  }\n)"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,sUAGjC;IACE,MAAM;QACJ,gBAAgB;QAChB,kBAAkB;QAClB,oBAAoB;IACtB;AACF","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/odile/anime-manga-app/lib/anilist.ts"],"sourcesContent":["export async function fetchMediaById(id: number) {\n  const query = `\n    query ($id: Int) {\n      Media(id: $id) {\n        id\n        title {\n          romaji\n          english\n          native\n        }\n        coverImage {\n          medium\n        }\n        format\n      }\n    }\n  `;\n\n  const response = await fetch('https://graphql.anilist.co', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n    body: JSON.stringify({ query, variables: { id } }),\n  });\n\n  const json = await response.json();\n\n  if (json.errors) {\n    throw new Error(json.errors.map((e: any) => e.message).join(', '));\n  }\n\n  return json.data.Media;\n}\n// import { useEffect } from 'react'\n\nexport async function fetchAniListExplore(type: string, sort: string) {\n  const query = `\n    query ($type: MediaType, $sort: [MediaSort]) {\n      Page(perPage: 20) {\n        media(type: $type, sort: $sort) {\n          id\n          title {\n            romaji\n            english\n            native\n          }\n          coverImage {\n            medium\n          }\n          format\n        }\n      }\n    }\n  `;\n\n  const variables = { type, sort: [sort] };\n\n  const response = await fetch('https://graphql.anilist.co', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n    body: JSON.stringify({ query, variables }),\n  });\n\n  const json = await response.json();\n\n  if (json.errors) {\n    throw new Error(json.errors.map((e: any) => e.message).join(', '));\n  }\n\n  return json.data.Page.media;\n}\n\n\ninterface MediaFilters {\n  type?: string\n  genre?: string\n  yearGroup?: string\n  sort?: string\n}\n\nexport async function fetchMedia({\n  searchQuery,\n  filters,\n  page = 1,\n  perPage = 20,\n}: {\n  searchQuery: string\n  filters: MediaFilters\n  page?: number\n  perPage?: number\n}) {\n  // Convert yearGroup to startDate bounds for AniList filtering\n  const yearBounds = (yearGroup?: string): { startDate_greater?: number; startDate_lesser?: number } => {\n    switch (yearGroup) {\n      case '2021-2025':\n        return { startDate_greater: 20210101, startDate_lesser: 20251231 }\n      case '2016-2020':\n        return { startDate_greater: 20160101, startDate_lesser: 20201231 }\n      case '2011-2015':\n        return { startDate_greater: 20110101, startDate_lesser: 20151231 }\n      case '2006-2010':\n        return { startDate_greater: 20060101, startDate_lesser: 20101231 }\n      case '2001-2005':\n        return { startDate_greater: 20010101, startDate_lesser: 20051231 }\n      case '1996-2000':\n        return { startDate_greater: 19960101, startDate_lesser: 20001231 }\n      case '1991-1995':\n        return { startDate_greater: 19910101, startDate_lesser: 19951231 }\n      case '1986-1990':\n        return { startDate_greater: 19860101, startDate_lesser: 19901231 }\n      case 'before-1985':\n        return { startDate_lesser: 19851231 }\n      default:\n        return {}\n    }\n  }\n\n  const { startDate_greater, startDate_lesser } = yearBounds(filters.yearGroup)\n\n  const query = `\n    query (\n      $page: Int,\n      $perPage: Int,\n      $search: String,\n      $type: MediaType,\n      $genre: String,\n      $sort: [MediaSort],\n      $startDate_greater: Int,\n      $startDate_lesser: Int\n    ) {\n      Page(page: $page, perPage: $perPage) {\n        media(\n          search: $search,\n          type: $type,\n          genre: $genre,\n          sort: $sort,\n          startDate_greater: $startDate_greater,\n          startDate_lesser: $startDate_lesser\n        ) {\n          id\n          title {\n            romaji\n            english\n            native\n          }\n          coverImage {\n            large\n            medium\n          }\n          description\n          format\n          status\n          episodes\n          duration\n          genres\n          averageScore\n        }\n      }\n    }\n  `\n\n  const variables = {\n    page,\n    perPage,\n    search: searchQuery || null,\n    type: filters.type || null,\n    genre: filters.genre || null,\n    sort: filters.sort ? [filters.sort] : ['POPULARITY_DESC'],\n    startDate_greater: startDate_greater || null,\n    startDate_lesser: startDate_lesser || null,\n  }\n\n  const response = await fetch('https://graphql.anilist.co', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json', Accept: 'application/json' },\n    body: JSON.stringify({ query, variables }),\n  })\n\n  const json = await response.json()\n  console.log('AniList API response:', json)\n\n  if (json.errors) {\n    throw new Error(json.errors.map((e: any) => e.message).join(', '))\n  }\n\n  return json.data.Page.media\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///Users/odile/anime-manga-app/app/library/page.tsx"],"sourcesContent":["'use client'\n\nimport { useEffect, useState } from 'react'\nimport { supabase } from '@/lib/supabaseClient'\nimport { fetchMediaById } from '@/lib/anilist'\n\ntype UserLibraryItem = {\n  [x: string]: any\n  id: string\n  media_id: number\n  media_type: 'anime' | 'manga'\n  status: 'watching' | 'interested' | 'completed' | 'dropped'\n  created_at: string\n}\n\nconst statuses = ['watching', 'interested', 'completed', 'dropped'] as const\n\nexport default function LibraryPage() {\n  const [items, setItems] = useState<UserLibraryItem[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const fetchLibrary = async () => {\n      const {\n        data: { user },\n        error: userError\n      } = await supabase.auth.getUser()\n  \n      if (userError) {\n        console.error('Error fetching user:', userError.message)\n        setLoading(false)\n        return\n      }\n\n      if (!user?.id) {\n        console.warn('User is not logged in')\n        setLoading(false)\n        return\n      }\n  \n      console.log('USER ID:', user.id)\n  \n      const { data, error } = await supabase\n        .from('user_library')\n        .select('*')\n        .eq('user_id', user.id)\n  \n      if (error) {\n        console.error('Fetch error:', error.message)\n      } else {\n        console.log('Fetched library items:', data)\n        setItems(data || [])\n        const detailed = await Promise.all(\n          data.map(async item => {\n            const media = await fetchMediaById(item.media_id)\n            return { ...item, media }\n          })\n        )\n        \n        setItems(detailed)\n      }\n  \n      setLoading(false)\n    }\n  \n    fetchLibrary()\n  }, [])\n\n  if (loading) return <p>Loading your library...</p>\n\n  if (items.length === 0) return <p>Your library is empty. Add some titles!</p>\n\n  // Group by media_type and then by status\n  const grouped: {\n    anime: Record<typeof statuses[number], UserLibraryItem[]>\n    manga: Record<typeof statuses[number], UserLibraryItem[]>\n  } = {\n    anime: {} as Record<typeof statuses[number], UserLibraryItem[]>,\n    manga: {} as Record<typeof statuses[number], UserLibraryItem[]>,\n  }\n\n  statuses.forEach(status => {\n    grouped.anime[status] = items.filter(\n      item => item.media_type === 'anime' && item.status === status\n    )\n    grouped.manga[status] = items.filter(\n      item => item.media_type === 'manga' && item.status === status\n    )\n  })\n\n  return (\n    <div className=\"p-6 space-y-8\">\n      {['anime', 'manga'].map(mediaType => (\n        <section key={mediaType}>\n          <h2 className=\"text-2xl font-bold capitalize mb-4\">{mediaType}</h2>\n          {statuses.map(status => (\n            <div key={status} className=\"mb-6\">\n              <h3 className=\"text-xl font-semibold capitalize mb-2\">{status}</h3>\n              {grouped?.[mediaType as keyof typeof grouped]?.[status]?.length === 0 ? (\n                <p>No titles in this category.</p>\n              ) : (\n                <ul className=\"list-disc list-inside\">\n                                    {grouped?.[mediaType as keyof typeof grouped]?.[status]?.map((item: UserLibraryItem) => (\n                    item?.media_id && item?.media_type ? (\n                      <li\n                        key={item.id}\n                        className=\"flex items-center space-x-4 cursor-pointer hover:bg-gray-100 p-2 rounded\"\n                        onClick={() => {\n                          window.location.href = `/${item.media_type}/${item.media_id}`\n                        }}\n                      >\n                        {item.media?.coverImage?.medium ? (\n                          <img src={item.media.coverImage.medium} alt=\"cover\" className=\"w-12 h-16 object-cover rounded\" />\n                        ) : (\n                          <div className=\"w-12 h-16 bg-gray-200 flex items-center justify-center text-xs text-gray-500 rounded\">\n                          </div>\n                        )}\n                        </li>\n                      ) : null\n                    ))}\n                  </ul>\n                )}\n            </div>\n          ))}\n        </section>\n      ))}\n    </div>\n  )\n}"],"names":[],"mappings":"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","debugId":null}}]
}