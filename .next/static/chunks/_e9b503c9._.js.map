{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/odile/anime-manga-app/lib/anilist.ts"],"sourcesContent":["export async function fetchMediaById(id: number) {\n  const query = `\n    query ($id: Int) {\n      Media(id: $id) {\n        id\n        title {\n          romaji\n          english\n          native\n        }\n        coverImage {\n          medium\n        }\n        format\n      }\n    }\n  `;\n\n  const response = await fetch('https://graphql.anilist.co', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n    body: JSON.stringify({ query, variables: { id } }),\n  });\n\n  const json = await response.json();\n\n  if (json.errors) {\n    throw new Error(json.errors.map((e: any) => e.message).join(', '));\n  }\n\n  return json.data.Media;\n}\n// import { useEffect } from 'react'\n\nexport async function fetchAniListExplore(type: string, sort: string) {\n  const query = `\n    query ($type: MediaType, $sort: [MediaSort]) {\n      Page(perPage: 20) {\n        media(type: $type, sort: $sort) {\n          id\n          title {\n            romaji\n            english\n            native\n          }\n          coverImage {\n            medium\n          }\n          format\n        }\n      }\n    }\n  `;\n\n  const variables = { type, sort: [sort] };\n\n  const response = await fetch('https://graphql.anilist.co', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n    body: JSON.stringify({ query, variables }),\n  });\n\n  const json = await response.json();\n\n  if (json.errors) {\n    throw new Error(json.errors.map((e: any) => e.message).join(', '));\n  }\n\n  return json.data.Page.media;\n}\n\n\ninterface MediaFilters {\n  type?: string\n  genre?: string\n  yearGroup?: string\n  sort?: string\n}\n\nexport async function fetchMedia({\n  searchQuery,\n  filters,\n  page = 1,\n  perPage = 20,\n}: {\n  searchQuery: string\n  filters: MediaFilters\n  page?: number\n  perPage?: number\n}) {\n  // Convert yearGroup to startDate bounds for AniList filtering\n  const yearBounds = (yearGroup?: string): { startDate_greater?: number; startDate_lesser?: number } => {\n    switch (yearGroup) {\n      case '2021-2025':\n        return { startDate_greater: 20210101, startDate_lesser: 20251231 }\n      case '2016-2020':\n        return { startDate_greater: 20160101, startDate_lesser: 20201231 }\n      case '2011-2015':\n        return { startDate_greater: 20110101, startDate_lesser: 20151231 }\n      case '2006-2010':\n        return { startDate_greater: 20060101, startDate_lesser: 20101231 }\n      case '2001-2005':\n        return { startDate_greater: 20010101, startDate_lesser: 20051231 }\n      case '1996-2000':\n        return { startDate_greater: 19960101, startDate_lesser: 20001231 }\n      case '1991-1995':\n        return { startDate_greater: 19910101, startDate_lesser: 19951231 }\n      case '1986-1990':\n        return { startDate_greater: 19860101, startDate_lesser: 19901231 }\n      case 'before-1985':\n        return { startDate_lesser: 19851231 }\n      default:\n        return {}\n    }\n  }\n\n  const { startDate_greater, startDate_lesser } = yearBounds(filters.yearGroup)\n\n  const query = `\n    query (\n      $page: Int,\n      $perPage: Int,\n      $search: String,\n      $type: MediaType,\n      $genre: String,\n      $sort: [MediaSort],\n      $startDate_greater: Int,\n      $startDate_lesser: Int\n    ) {\n      Page(page: $page, perPage: $perPage) {\n        media(\n          search: $search,\n          type: $type,\n          genre: $genre,\n          sort: $sort,\n          startDate_greater: $startDate_greater,\n          startDate_lesser: $startDate_lesser\n        ) {\n          id\n          title {\n            romaji\n            english\n            native\n          }\n          coverImage {\n            large\n            medium\n          }\n          description\n          format\n          status\n          episodes\n          duration\n          genres\n          averageScore\n        }\n      }\n    }\n  `\n\n  const variables = {\n    page,\n    perPage,\n    search: searchQuery || null,\n    type: filters.type || null,\n    genre: filters.genre || null,\n    sort: filters.sort ? [filters.sort] : ['POPULARITY_DESC'],\n    startDate_greater: startDate_greater || null,\n    startDate_lesser: startDate_lesser || null,\n  }\n\n  const response = await fetch('https://graphql.anilist.co', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json', Accept: 'application/json' },\n    body: JSON.stringify({ query, variables }),\n  })\n\n  const json = await response.json()\n  console.log('AniList API response:', json)\n\n  if (json.errors) {\n    throw new Error(json.errors.map((e: any) => e.message).join(', '))\n  }\n\n  return json.data.Page.media\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file:///Users/odile/anime-manga-app/app/page.tsx"],"sourcesContent":["'use client'\n\nimport { useEffect, useState } from 'react'\nimport { fetchAniListExplore } from '@/lib/anilist'\nimport Link from 'next/link'\n\ntype MediaItem = {\n  id: number\n  coverImage: { medium: string }\n  title: { english?: string; romaji: string }\n  format: string | null\n}\n\nconst sections = [\n  { title: 'ðŸ”¥ Trending Anime', type: 'ANIME', sort: 'TRENDING_DESC' },\n  { title: 'ðŸŒŸ Top-Rated Anime', type: 'ANIME', sort: 'SCORE_DESC' },\n  { title: 'ðŸ“š Popular Manga', type: 'MANGA', sort: 'POPULARITY_DESC' },\n  { title: 'ðŸ§  Top-Rated Manga', type: 'MANGA', sort: 'SCORE_DESC' }\n]\n\nexport default function HomePage() {\n  const [data, setData] = useState<Record<string, MediaItem[]>>({})\n\n  useEffect(() => {\n    const fetchAll = async () => {\n      const newData: Record<string, MediaItem[]> = {}\n      for (const section of sections) {\n        const list = await fetchAniListExplore(section.type, section.sort)\n        newData[section.title] = list\n      }\n      setData(newData)\n    }\n    fetchAll()\n  }, [])\n\n  return (\n    <div className=\"p-6 space-y-12\">\n      <h1 className=\"text-3xl font-bold\">Welcome to your Library</h1>\n      <p className=\"text-gray-600 mb-6\">This is your private anime-manga dashboard ðŸŽŒ</p>\n\n      {sections.map((section) => (\n        <div key={section.title} className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">{section.title}</h2>\n            <Link\n              href={`/explore?type=${section.type}&sort=${section.sort}`}\n              className=\"text-sm text-blue-500 hover:underline\"\n            >\n              Explore more â†’\n            </Link>\n          </div>\n\n          <div className=\"overflow-x-auto\">\n            <div className=\"flex space-x-4\">\n              {(data[section.title] || []).map((item) => (\n                <Link\n                  href={`/${section.type.toLowerCase()}/${item.id}`}\n                  key={item.id}\n                  className=\"min-w-[150px] bg-white shadow rounded p-2 hover:scale-105 transition\"\n                >\n                  <img\n                    src={item.coverImage.medium}\n                    alt=\"cover\"\n                    className=\"w-full h-48 object-cover rounded\"\n                  />\n                  <h3 className=\"mt-2 text-sm font-semibold truncate\">\n                    {item.title.english || item.title.romaji}\n                  </h3>\n                  <p className=\"text-xs text-gray-500\">{item.format}</p>\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAaA,MAAM,WAAW;IACf;QAAE,OAAO;QAAqB,MAAM;QAAS,MAAM;IAAgB;IACnE;QAAE,OAAO;QAAsB,MAAM;QAAS,MAAM;IAAa;IACjE;QAAE,OAAO;QAAoB,MAAM;QAAS,MAAM;IAAkB;IACpE;QAAE,OAAO;QAAsB,MAAM;QAAS,MAAM;IAAa;CAClE;AAEc,SAAS;;IACtB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA+B,CAAC;IAE/D,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;8BAAE;YACR,MAAM;+CAAW;oBACf,MAAM,UAAuC,CAAC;oBAC9C,KAAK,MAAM,WAAW,SAAU;wBAC9B,MAAM,OAAO,MAAM,CAAA,GAAA,iHAAA,CAAA,sBAAmB,AAAD,EAAE,QAAQ,IAAI,EAAE,QAAQ,IAAI;wBACjE,OAAO,CAAC,QAAQ,KAAK,CAAC,GAAG;oBAC3B;oBACA,QAAQ;gBACV;;YACA;QACF;6BAAG,EAAE;IAEL,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAAqB;;;;;;0BACnC,6LAAC;gBAAE,WAAU;0BAAqB;;;;;;YAEjC,SAAS,GAAG,CAAC,CAAC,wBACb,6LAAC;oBAAwB,WAAU;;sCACjC,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;8CAAyB,QAAQ,KAAK;;;;;;8CACpD,6LAAC,+JAAA,CAAA,UAAI;oCACH,MAAM,CAAC,cAAc,EAAE,QAAQ,IAAI,CAAC,MAAM,EAAE,QAAQ,IAAI,EAAE;oCAC1D,WAAU;8CACX;;;;;;;;;;;;sCAKH,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAI,WAAU;0CACZ,CAAC,IAAI,CAAC,QAAQ,KAAK,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,qBAChC,6LAAC,+JAAA,CAAA,UAAI;wCACH,MAAM,CAAC,CAAC,EAAE,QAAQ,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE,KAAK,EAAE,EAAE;wCAEjD,WAAU;;0DAEV,6LAAC;gDACC,KAAK,KAAK,UAAU,CAAC,MAAM;gDAC3B,KAAI;gDACJ,WAAU;;;;;;0DAEZ,6LAAC;gDAAG,WAAU;0DACX,KAAK,KAAK,CAAC,OAAO,IAAI,KAAK,KAAK,CAAC,MAAM;;;;;;0DAE1C,6LAAC;gDAAE,WAAU;0DAAyB,KAAK,MAAM;;;;;;;uCAX5C,KAAK,EAAE;;;;;;;;;;;;;;;;mBAhBZ,QAAQ,KAAK;;;;;;;;;;;AAoC/B;GAzDwB;KAAA","debugId":null}}]
}